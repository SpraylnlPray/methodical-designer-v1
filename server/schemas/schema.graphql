scalar URI

enum NodeType{
  API
  Command
  Query
  Event
  Persistence
  AbstractUserInterface
  Object
  Computation
  Container
  Domain
  Invariant
  ArchitecturalDecisionRecord
  Definition
}

enum LinkType{
  PartOf
  Trigger
  Read
  Mutate
  Generic
}

interface IReturnInfo {
  success: Boolean!
  message: String
}

interface IDisplayable{
  "Minimal data necessary for the object to appear on screen"
  id: ID!
  label: String
  story: URI
}

interface ILink{
  "A link must know to what nodes it is connected to"
  x_id: ID!
  y_id: ID!
  sequence: SequenceProperty
  """
  if optional=true then sequence MAY be used to define a set of options
  """
  optional: Boolean
  "The frontend will load arrow styles according to the link type"
  type: LinkType
}

interface INode{
  type: NodeType!
  synchronous: Boolean
  unreliable: Boolean
}

type Node implements INode & IDisplayable{
  id: ID!
  label: String!
  type: NodeType!
  story: URI
  synchronous: Boolean
  unreliable: Boolean
}

type Link implements ILink & IDisplayable{
  id: ID!
  label: String!
  x_id: ID!
  y_id: ID!
  type: LinkType!
  story: URI
  sequence: SequenceProperty
  optional: Boolean
}

type SequenceProperty{
  group: String
  seq: Int
}

input NodeInput {
  label: String
  story: URI
  type: NodeType
}

input LinkInput {
  label: String
  x_id: ID
  y_id: ID
  type: LinkType
  story: URI
  sequence: SequencePropertyInput
  optional: Boolean
  synchronous: Boolean
  unreliable: Boolean
}

input SequencePropertyInput {
  group: String
  label: String
  seq: Int
  remove: Boolean
}

type Mutation{
  SeedDB: seedReturn

  CreateNode(label: String!, type: NodeType!, story: URI): NodeOperationReturn
  CreateLink(label: String!, x_id: ID!, y_id: ID!, type: LinkType!, sequence: SequencePropertyInput, props: LinkInput): LinkOperationReturn
  UpdateNode(id: ID!, props: NodeInput): NodeOperationReturn
  UpdateLink(id: ID!, props: LinkInput, sequence: SequencePropertyInput): LinkOperationReturn
  DeleteNode(id: ID!): NodeOperationReturn
  DeleteLink(id: ID!): LinkOperationReturn
}

"Returned when performing an operation on a node node"
type NodeOperationReturn implements IReturnInfo {
  success: Boolean!
  message: String
  node: Node
}

"Returned when performing an operation on a link node"
type LinkOperationReturn implements IReturnInfo{
  success: Boolean!
  message: String
  link: Link
  x: Node
  y: Node
  seq: SequenceProperty
}

type seedReturn {
  success: Boolean!
}

#type Queries{
# get node
# get link
# get nodes
# get links

# get whole project (?)
#}

